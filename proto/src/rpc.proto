syntax = "proto3";

package rpc;


message Address{
  int32 workchain = 1;
  bytes address = 2;
}

message StateRequest {
  Address address = 1;
}


message StateResponse {
  message GenTimings{
    uint64 gen_lt = 1;
    uint32 gen_utime = 2;

  }
  message LastTransactionId{
    bytes hash = 1;
    uint64 lt = 2;
  }


  message ContractState{
    bytes account = 1;
    optional GenTimings gen_timings = 2;
    LastTransactionId last_transaction_id = 3;
  }

  optional ContractState contract_state = 1;

}

message SendMessageRequest {
  bytes message = 1;
  optional uint64 expire_at_unix_timestamp = 2;
}

message SendMessageResponse {
  MessageStatus status = 1;
}

enum MessageStatus{
  Delivered = 0;
  Timeout = 1;
}

message GetlastKeyBlockRequest{}

message GetlastKeyBlockResponse {
  bytes key_block = 1;
}

message GetTransactionRequest{
  oneof ty {
    bytes hash = 1;
    uint32 time = 2;
  }
}

message GetTransactionResp {
  bytes hash = 1;
  uint32 time = 2;
  uint64  lt = 3;
  bytes transaction = 4;
}

message CommitBlockRequest{
  uint32 seq_no = 1;
  uint64 shard = 2;
  uint32 client_id = 3;
}


service Rpc{
  rpc State(StateRequest) returns (StateResponse);
  rpc GetlastKeyBlock(GetlastKeyBlockRequest) returns (GetlastKeyBlockResponse);
  rpc SendMessage(SendMessageRequest) returns (stream SendMessageResponse);
}

service Stream{
  rpc GetTransaction(GetTransactionRequest) returns (stream GetTransactionResp);
}